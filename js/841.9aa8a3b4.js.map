{"version":3,"file":"js/841.9aa8a3b4.js","mappings":"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","sources":["webpack://vue3_tools/./src/components/public/time-zone/TimeZone.vue","webpack://vue3_tools/./src/components/public/time-zone/TimeZoneBody.vue","webpack://vue3_tools/./src/components/public/time-zone/TimeZoneHours.vue","webpack://vue3_tools/./src/components/public/time-zone/TimeZoneHours.vue?482e","webpack://vue3_tools/./src/components/public/time-zone/TimeZoneBody.vue?7af1","webpack://vue3_tools/./src/components/public/time-zone/TimeZoneHeader.vue","webpack://vue3_tools/../src/build-country.js","webpack://vue3_tools/../src/build-timezone.js","webpack://vue3_tools/../src/index.js","webpack://vue3_tools/./src/components/public/time-zone/TimeZoneHeader.vue?23d4","webpack://vue3_tools/./src/components/public/time-zone/TimeZone.vue?0754"],"sourcesContent":["<template>\r\n    <section class=\"time-zone\">\r\n        \r\n        <!-- Header -->\r\n        <TimeZoneHeader\r\n            @eventAddPerson=\"addPerson\"\r\n        />\r\n\r\n        <!-- Body -->\r\n        <TimeZoneBody :data=\"data\"\r\n            @eventDelPerson=\"delPerson\"\r\n            @eventSortPerson=\"sortPerson\"\r\n        />\r\n\r\n    </section>\r\n</template>\r\n<script>\r\nimport { reactive, computed, onMounted, nextTick } from 'vue'\r\n\r\nimport userData from \"@/assets/data/timeZoneUserdata.json\";\r\n\r\nimport TimeZoneBody from './TimeZoneBody.vue';\r\nimport TimeZoneHeader from './TimeZoneHeader.vue';\r\n\r\nexport default {\r\n    name: 'TimeZone',\r\n    components: {\r\n        TimeZoneHeader,\r\n        TimeZoneBody\r\n    },\r\n\r\n    setup() {\r\n        // 數據\r\n        const data = reactive({\r\n            person_list: [], // 使用者清單 (存放Person物件)\r\n            current_list: [], // 畫面時區清單 (存放CurrentList物件)\r\n        })\r\n\r\n\r\n        // 計算屬性\r\n        \r\n        // 製作 01 ~ 24 的陣列\r\n        data.hours = computed(()=>{\r\n            let arr = [];\r\n            for ( let i=1 ; i <= 24 ; i++ ) {\r\n                arr.push( i.toString().padStart(2, '0') );\r\n            }\r\n            return arr;\r\n        })\r\n\r\n        // 方法\r\n\r\n        //-----------------------------------\r\n        // Event\r\n        //-----------------------------------\r\n\r\n        // 取得資料\r\n        async function getData() {\r\n\r\n            //-------------------\r\n            // Person Data\r\n            //-------------------\r\n\r\n            // 解析 person data\r\n            let personsData = localStorage.getItem(\"persons\"); // 從 localStorage 取得之前存的資料\r\n\r\n\r\n            // 從 localStorage 取得\r\n            if ( personsData ) {\r\n                data.person_list = JSON.parse(personsData).persons;\r\n\r\n            // 從 寫死 json 取得\r\n            } else {\r\n                \r\n                userData.persons.forEach((userdata)=>{\r\n                    let p = {\r\n                        name: userdata.name,  // \"王小明\"\r\n                        timezone: userdata.timezone  // \"Asia/Taipei\"\r\n                    };\r\n                    data.person_list.push(p);\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n        //-----------------------------------\r\n        // Render\r\n        //-----------------------------------\r\n\r\n        // 更新目前清單資料\r\n        async function updateCurrentListData() {\r\n            let date = new Date();\r\n            data.current_list.splice(0, data.current_list.length); // 清空\r\n\r\n            // 遍歷 person 資料\r\n            data.person_list.forEach((person)=>{\r\n\r\n                // 取得 person 所在時區的資料---\r\n\r\n                // 世界時區: 2024/1/11 上午11:38:50 [GMT+8]\r\n                let strTime = date.toLocaleString(\"zh-TW\", {\r\n                    timeZone: `${person.timezone}`,\r\n                    timeZoneName: 'short' // e.g. GMT+1\r\n                });\r\n                let re_gmt = /\\[(.+?)\\]/g; // 取出中括號的內容\r\n                let my_gmt = re_gmt.exec(strTime); // GMT+8\r\n        \r\n\r\n                // 標準時間名稱 (中文): 2024/1/11 上午11:38:50 [台北標準時間]\r\n                let strTime_ch = date.toLocaleString(\"zh-TW\", {\r\n                    timeZone: `${person.timezone}`,\r\n                    timeZoneName: 'long' // e.g. 台北標準時間\r\n                });\r\n                let re_gmt_ch = /\\[(.+?)\\]/g; // 取出中括號的內容\r\n                let my_gmt_ch = re_gmt_ch.exec(strTime_ch); // 台北標準時間\r\n\r\n\r\n                // 標準時間名稱 (英文): 1/11/2024, 11:38:50 AM Taipei Standard Time\r\n                let strTime_en = date.toLocaleString(\"en-US\", {\r\n                    timeZone: `${person.timezone}`,\r\n                    timeZoneName: 'long' // e.g. British Summer Time\r\n                });\r\n                let re_gmt_en = /(AM(.+)|PM(.+))/g; // 取出 AM 或 PM 後的字串\r\n                let my_gmt_en = re_gmt_en.exec(strTime_en); // Taipei Standard Time\r\n\r\n\r\n                // 年份 (yyyy)\r\n                let strTime_year = date.toLocaleString(\"en-US\", {\r\n                    timeZone: `${person.timezone}`,\r\n                    hourCycle: 'h24', year: 'numeric'\r\n                });\r\n\r\n                // 月份 (mm)\r\n                let strTime_month = date.toLocaleString(\"en-US\", {\r\n                    timeZone: `${person.timezone}`,\r\n                    hourCycle: 'h24',\r\n                    month: '2-digit'\r\n                });\r\n\r\n                // 日期 (dd)\r\n                let strTime_day = date.toLocaleString(\"en-US\", {\r\n                    timeZone: `${person.timezone}`,\r\n                    hourCycle: 'h24',\r\n                    day: '2-digit'\r\n                });\r\n\r\n                // 星期幾 (www)\r\n                let strTime_week = date.toLocaleString(\"zh-TW\", {\r\n                    timeZone: `${person.timezone}`,\r\n                    weekday: 'long' // short: 週一 / long: 星期一\r\n                });\r\n\r\n                // 時間 (hh:mm:ss)\r\n                let strTime_time = date.toLocaleString(\"en-US\", {\r\n                    timeZone: `${person.timezone}`,\r\n                    hourCycle: 'h24',\r\n                    hour: '2-digit', minute: '2-digit',\r\n                    // second: '2-digit'\r\n                });\r\n\r\n                // 幾點 (hh)\r\n                let strTime_hour = date.toLocaleString(\"en-US\", {\r\n                    timeZone: `${person.timezone}`,\r\n                    hourCycle: 'h24',\r\n                    hour: '2-digit'\r\n                });\r\n\r\n\r\n                // 時區對照 hh\r\n                let hh_arr = [...data.hours]; // 複製一份 hh 陣列\r\n\r\n                // 調整元素順序: 將 hh 放在中間 (索引=11位置)\r\n                for (let k=0 ; k < 24 ; k++) {\r\n\r\n                    // 若 hh 位於 索引=12的前方\r\n                    if ( hh_arr.indexOf(strTime_hour) < 12 ) {\r\n                        hh_arr.unshift( hh_arr.pop() ); // 將 最後一個元素 移至 開頭位置\r\n\r\n                    // 若 hh 位於 索引=12的後方\r\n                    } else if ( hh_arr.indexOf(strTime_hour) > 12 ) {\r\n                        hh_arr.push( hh_arr.shift() ); // 將 第一個元素 移至 結尾位置\r\n                    }\r\n                }\r\n\r\n\r\n                // 創建 CurrentList 物件\r\n                let cl = {\r\n                    person_name: person.name, // 姓名: \"王小明\"\r\n                    person_location: person.timezone, // 時區: \"Asia/Taipei\"\r\n                    cur_date: `${strTime_year}/${strTime_month}/${strTime_day}`, // 目前日期 (yyyy/mm/dd): \"2024/01/11\"\r\n                    cur_week: strTime_week, // 目前星期幾 (www): \"星期四\"\r\n                    cur_hour: strTime_hour, // 目前幾點 (hh): \"10\"\r\n                    cur_time: strTime_time, // 目前時間 (hh:mm): \"10:33\"\r\n                    gmt: my_gmt[1], // 世界時區: \"GMT+8\"\r\n                    gmt_ch: my_gmt_ch[1], // 標準時間名 (ch): \"台北標準時間\"\r\n                    gmt_en: my_gmt_en[2] ? my_gmt_en[2] : my_gmt_en[3], // 標準時間名 (en): \"Taipei Standard Time\"\r\n                    hours_arr: hh_arr, // 時間對照 hh array\r\n                }\r\n                \r\n                // 更新資料\r\n                data.current_list.push(cl);\r\n            });\r\n        }\r\n\r\n\r\n        //-----------------------------------\r\n        // Binding\r\n        //-----------------------------------\r\n\r\n        // 新增成員\r\n        function addPerson(obj) {\r\n            // 新增\r\n            data.person_list.push(obj);\r\n            updateCurrentListData(); // 更新表格資料\r\n\r\n            // 將資料存到 localStorage\r\n            localStorage.setItem(\"persons\", JSON.stringify({ persons: data.person_list }));\r\n        }\r\n\r\n        // 刪除成員\r\n        function delPerson(index) {\r\n            let flag = window.confirm(`確定要刪除此人嗎？`);\r\n            if ( !flag ) return;\r\n\r\n            data.person_list.splice(index, 1); // 刪除指定索引的元素\r\n            updateCurrentListData(); // 更新表格資料\r\n            \r\n            // 將資料存到 localStorage\r\n            localStorage.setItem(\"persons\", JSON.stringify({ persons: data.person_list }));\r\n        }\r\n\r\n        // 排序成員\r\n        function sortPerson(index, type) {\r\n            let index1 = index;\r\n            let index2 = null;\r\n\r\n            switch(type) {\r\n                case 'up':\r\n                    index2 = (index1 - 1) < 0 ? null : (index1 - 1);\r\n                    break;\r\n                case 'down':\r\n                    index2 = (index1 + 1) > (data.person_list.length - 1) ? null : (index1 + 1);\r\n                    break;\r\n            }\r\n\r\n            if ( index2 == null ) return;\r\n\r\n            // 交換元素順序\r\n            data.person_list[index1] = data.person_list.splice(index2, 1, data.person_list[index1])[0];\r\n\r\n            updateCurrentListData(); // 更新表格資料\r\n            \r\n            // 將資料存到 localStorage\r\n            localStorage.setItem(\"persons\", JSON.stringify({ persons: data.person_list }));\r\n        }\r\n\r\n        \r\n\r\n\r\n        // 生命週期鉤子\r\n\r\n        // mounted\r\n        onMounted(async ()=>{\r\n            await getData(); // 取得資料\r\n            await updateCurrentListData(); // 更新表格資料\r\n\r\n            // 每分鐘執行\r\n            setInterval(()=>{\r\n                updateCurrentListData(); // 更新表格資料\r\n                console.log('每分鐘更新表格資料');\r\n            }, 1000*60);\r\n\r\n\r\n            nextTick(function () {\r\n                // do stuff with the DOM\r\n\r\n                \r\n            })\r\n        })\r\n\r\n\r\n\r\n\r\n        return {\r\n            data,\r\n\r\n            addPerson,\r\n            delPerson,\r\n            sortPerson,\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style lang=\"scss\">\r\n\r\n</style>","<template>\r\n\r\n    <section class=\"main-wrap\">\r\n\r\n        <table class=\"table table-wrap\">\r\n            <thead>\r\n                <tr>\r\n                    <td>目前時間</td>\r\n                    <td>時區對照</td>\r\n                    <td>地區/城市/GMT</td>\r\n                    <td>時區</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr v-for=\"(item, index) of initData.current_list\" :key=\"index\">\r\n\r\n                    <!-- 目前時間 -->\r\n                    <td>\r\n                        {{ item.person_name }}<br>\r\n                        <span class=\"time\">{{ item.cur_time }}</span><br>\r\n                        {{ item.cur_date }} {{ item.cur_week }}<br>\r\n\r\n                        <div class=\"btn-wrap\">\r\n                            <button @click=\"sortPerson(index, 'up')\">上移</button>\r\n                            <button @click=\"sortPerson(index, 'down')\">下移</button>\r\n                            <button @click=\"delPerson(index)\">刪除</button>\r\n                        </div>\r\n                    </td>\r\n\r\n                    <!-- 時區對照 -->\r\n                    <td>\r\n                        <!-- 圖形對照表 -->\r\n                        <TimeZoneHours \r\n                            :item=\"item\" \r\n                            :hover_index=\"hover_index\"\r\n                            @eventUpdateHoverIndex=\"updateHoverIndex\"\r\n                        />\r\n                    </td>\r\n\r\n                    <!-- 地區/城市/GMT -->\r\n                    <td>\r\n                        {{ item.person_location }}<br>\r\n                        {{ item.gmt }}\r\n                    </td>\r\n\r\n                    <!-- 時區 -->\r\n                    <td>\r\n                        {{ item.gmt_ch }}<br>\r\n                        {{ item.gmt_en }}\r\n                    </td>\r\n\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n\r\n    </section>\r\n\r\n</template>\r\n<script>\r\nimport { ref, toRef } from 'vue'\r\n\r\nimport TimeZoneHours from './TimeZoneHours.vue'\r\n\r\nexport default {\r\n    name: 'TimeZoneBody',\r\n\r\n    components: {\r\n        TimeZoneHours\r\n    },\r\n\r\n    props: ['data'],\r\n    emits: [\r\n        'eventDelPerson',\r\n        'eventSortPerson',\r\n    ],\r\n\r\n    setup(props, context) {\r\n        // 從 props 來的資料\r\n        const initData = toRef(props, 'data');\r\n\r\n        // 數據\r\n        let hover_index = ref(false);  // 目前 hover 到的 hh 的 index\r\n\r\n\r\n        // 方法\r\n\r\n        // 刪除成員\r\n        function delPerson(index) {\r\n            context.emit('eventDelPerson', index)\r\n        }\r\n\r\n        // 排序成員\r\n        function sortPerson(index, type) {\r\n            context.emit('eventSortPerson', index, type)\r\n        }\r\n\r\n        // 更新目前 hover 的 hh index (子組件共用資料才能讓每一欄同時有高亮樣式)\r\n        function updateHoverIndex(index) {\r\n            hover_index.value = index;\r\n        }\r\n\r\n\r\n        return {\r\n            initData,\r\n            hover_index,\r\n\r\n            delPerson,\r\n            sortPerson,\r\n            updateHoverIndex,\r\n        }\r\n    }\r\n}\r\n</script>","<template>\r\n\r\n    <div class=\"hour-wrap\">\r\n        <span v-for=\"(h, index) of initItem.hours_arr\" :key=\"index\"\r\n            :data-hour=\"h\"\r\n\r\n            class=\"hour\"\r\n            :class=\"{ \r\n                'sel': initHoverIndex === index,\r\n                'cur': h == initItem.cur_hour\r\n            }\"\r\n            \r\n            @mouseover=\"updateHoverIndex(index)\"\r\n            @mouseleave=\"updateHoverIndex(false)\"\r\n        >{{ h }}</span>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { toRef } from 'vue'\r\n\r\nexport default {\r\n    name: 'TimeZoneHours',\r\n    props: ['item', 'hover_index'],\r\n    emits: ['eventUpdateHoverIndex'],\r\n\r\n    setup(props, context) {\r\n        // 從 props 來的資料\r\n        const initItem = toRef(props, 'item')\r\n        const initHoverIndex = toRef(props, 'hover_index')\r\n        \r\n\r\n\r\n        // 方法\r\n\r\n        // 更新目前 hover 的 hh index (子組件共用資料才能讓每一欄同時有高亮樣式)\r\n        function updateHoverIndex(index) {\r\n            context.emit('eventUpdateHoverIndex', index);\r\n        }\r\n\r\n\r\n        return {\r\n            initItem,\r\n            initHoverIndex,\r\n\r\n            updateHoverIndex,\r\n        }\r\n    }\r\n}\r\n</script>","import { render } from \"./TimeZoneHours.vue?vue&type=template&id=fec6d10c\"\nimport script from \"./TimeZoneHours.vue?vue&type=script&lang=js\"\nexport * from \"./TimeZoneHours.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./TimeZoneBody.vue?vue&type=template&id=133bd592\"\nimport script from \"./TimeZoneBody.vue?vue&type=script&lang=js\"\nexport * from \"./TimeZoneBody.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n\r\n    <section class=\"header-wrap\">\r\n\r\n        <form>\r\n            <fieldset>\r\n                <label for=\"person-name\">姓名</label>\r\n                <input type=\"text\" id=\"person-name\" v-model=\"data.form_name\">\r\n            </fieldset>\r\n\r\n            <fieldset>\r\n                <label for=\"timezone-continent\">州</label>\r\n                <select name=\"timezone-continent\" id=\"timezone-continent\" v-model=\"data.form_continent\" @change=\"changeContinent()\">\r\n                    <option value=\"\" selected>請選擇選項</option>\r\n                    <option v-for=\"(continent, i) of data.select_continent_arr\" :value=\"continent\" :key=\"i\">{{ continent }}</option>\r\n                </select>\r\n            </fieldset>\r\n\r\n            <fieldset>\r\n                <label for=\"timezone-country\">國家</label>\r\n                <select name=\"timezone-country\" id=\"timezone-country\" v-model=\"data.form_country\" @change=\"changeCountry()\">\r\n                    <option value=\"\" selected>請選擇選項</option>\r\n                    <option v-for=\"(country, i) of data.select_country_arr\" :value=\"country\" :key=\"i\">{{ country }}</option>\r\n                </select>\r\n            </fieldset>\r\n\r\n            <fieldset>\r\n                <label for=\"timezone-region\">城市地區</label>\r\n                <select name=\"timezone-region\" id=\"timezone-region\" v-model=\"data.form_region\">\r\n                    <option value=\"\" selected>請選擇選項</option>\r\n                    <option v-for=\"(region, i) of data.select_region_arr\" :value=\"region\" :key=\"i\">{{ region }}</option>\r\n                </select>\r\n            </fieldset>\r\n\r\n            <button type=\"button\" @click=\"addPerson()\">新增成員</button>\r\n        </form>\r\n\r\n    </section>\r\n\r\n</template>\r\n\r\n<script>\r\nimport ct from 'countries-and-timezones'; // 套件 https://www.npmjs.com/package/countries-and-timezones\r\nimport { reactive, computed, onMounted, nextTick } from 'vue'\r\n\r\nexport default {\r\n    name: 'TimeZoneHeader',\r\n    emits: [\r\n        'eventAddPerson'\r\n    ],\r\n    \r\n    setup(props, context) {\r\n        // 數據\r\n        const data = reactive({\r\n            aryIannaTimeZones: [], // 下拉式選單時區資料 (存放TimeZone物件)\r\n            // [\r\n            //     {\r\n            //         continent: '州',\r\n            //         tzc: [\r\n            //             {\r\n            //                 country: '國家',\r\n            //                 tz: [\r\n            //                     {\r\n            //                         timezones: '州/地區城市',\r\n            //                         regions: '地區城市'\r\n            //                     }\r\n            //                 ]\r\n            //             }\r\n            //         ]\r\n            //     }\r\n            // ]\r\n            \r\n            // 表單資料\r\n            form_name: '', // 姓名輸入框\r\n            form_continent: '', // 時區下拉選單-州\r\n            form_country: '', // 時區下拉選單-國家\r\n            form_region: '', // 時區下拉選單-城市地區\r\n        })\r\n\r\n\r\n        // 計算屬性\r\n\r\n        // 下拉式選單-州\r\n        data.select_continent_arr = computed(()=>{\r\n            let continent_arr = [];\r\n            data.aryIannaTimeZones.forEach((item)=>{\r\n                continent_arr.push(item.continent);\r\n            });\r\n            return continent_arr;\r\n        })\r\n\r\n        // 下拉式選單-國家\r\n        data.select_country_arr = computed(()=>{\r\n            let country_arr = [];\r\n            if ( data.form_continent.length > 0 ) {\r\n                let cur_continent = data.aryIannaTimeZones.filter((item)=>item.continent === data.form_continent)[0];\r\n                cur_continent.tzc.forEach((item)=>{\r\n                    country_arr.push(item.country);\r\n                });\r\n            }\r\n            return country_arr.sort();\r\n        })\r\n\r\n        // 下拉式選單-時區\r\n        data.select_region_arr = computed(()=>{\r\n            let region_arr = [];\r\n            if ( data.form_country.length > 0 ) {\r\n                let cur_continent = data.aryIannaTimeZones.filter((item)=>item.continent === data.form_continent)[0];\r\n                let cur_country = cur_continent.tzc.filter((item)=>item.country === data.form_country)[0];\r\n\r\n                cur_country.tz.forEach((item)=>{\r\n                    region_arr.push(item.region);\r\n                });\r\n            }\r\n            return region_arr.sort();\r\n        })\r\n\r\n\r\n\r\n        // 方法\r\n\r\n        async function getPlaceData() {\r\n            //-------------------\r\n            // Timezone Data\r\n            //-------------------\r\n\r\n            // 解析 timezone data\r\n            let aryIanaTimeZones = Intl.supportedValuesOf('timeZone');\r\n            let timezoneArr = aryIanaTimeZones.sort(); // 重新排序 (升序 A-Z)\r\n   \r\n            timezoneArr.forEach((timezone)=>{\r\n                let [continent, ...rest] = timezone.split('/'); // 以 \"/\" 分割字串為陣列元素\r\n                let remainder = rest.join('/'); // 排除第一個元素，其餘元素以 \"/\" 串接為一個新字串\r\n\r\n                // 組合成 TimeZone 物件格式\r\n                let tz = {\r\n                    timezone: timezone,  // 包含時區 (州/地區城市)\r\n                    region: remainder,  // 地區與城市\r\n                }\r\n\r\n                // 取得指定 timezone 的國家\r\n                let countries = ct.getCountriesForTimezone(timezone);\r\n\r\n                countries.forEach((country)=>{\r\n                    // flag 是否已存在此州\r\n                    let flag_continent = data.aryIannaTimeZones.some((item) => item.continent === continent);\r\n\r\n                    // 已存在此洲物件\r\n                    if ( flag_continent ) {\r\n\r\n                        data.aryIannaTimeZones.forEach((obj)=>{\r\n                            // 找出此洲的物件\r\n                            if ( obj.continent === continent ) {\r\n                                // flag 是否已存在此國家\r\n                                let flag_country = obj.tzc.some((item) => item.country === country.name);\r\n\r\n                                // 已存在此國家物件\r\n                                if ( flag_country ) {\r\n                                    obj.tzc.forEach((c_obj)=>{\r\n                                        // 找出此國家的物件\r\n                                        if ( c_obj.country === country.name ) {\r\n                                            c_obj.tz.push(tz);\r\n                                        }\r\n                                    });\r\n\r\n                                // 未存在此國家物件\r\n                                } else {\r\n                                    // 組合成 TimeZoneCountry 物件格式\r\n                                    let tzc = {\r\n                                        continent: continent,  // 洲\r\n                                        country: country.name,  // 國家\r\n                                        tz: [tz],  // TimeZone 物件\r\n                                    }\r\n                                    obj.tzc.push(tzc);\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                    // 未存在此洲物件\r\n                    } else {\r\n                        // 組合成 TimeZoneCountry 物件格式\r\n                        let tzc = {\r\n                            continent: continent,  // 洲\r\n                            country: country.name,  // 國家\r\n                            tz: [tz],  // TimeZone 物件\r\n                        }\r\n                        \r\n                        // 組合成 Place 物件格式\r\n                        let place = {\r\n                            continent: continent,  // 洲\r\n                            tzc: [tzc],  // TimeZoneCountry 物件\r\n                        }\r\n\r\n                        // 新增此洲物件\r\n                        data.aryIannaTimeZones.push(place); // 儲存資料\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n\r\n\r\n        // 時區下拉選單-州 值改變\r\n        function changeContinent() {\r\n            data.form_country = ''; // 時區下拉選單-國家\r\n            data.form_region = ''; // 時區下拉選單-城市地區\r\n        }\r\n\r\n        // 時區下拉選單-國家 值改變\r\n        function changeCountry() {\r\n            data.form_region = ''; // 時區下拉選單-城市地區\r\n        }\r\n\r\n\r\n\r\n        // 新增成員\r\n        function addPerson() {\r\n\r\n            // value 不為空值\r\n            if ( data.form_name != \"\" && data.form_continent != \"\" && data.form_country != \"\" && data.form_region != \"\" ) {\r\n                \r\n                // 製作新物件\r\n                let p = {\r\n                    name: data.form_name,\r\n                    timezone: `${data.form_continent}/${data.form_region}`\r\n                };\r\n\r\n                context.emit('eventAddPerson', p);  // 通知父組件新增\r\n\r\n                // 清空欄位資料\r\n                data.form_name = \"\";\r\n                data.form_continent = \"\";\r\n                data.form_country = \"\";\r\n                data.form_region = \"\";\r\n            }\r\n        }\r\n\r\n\r\n        // 生命週期鉤子\r\n\r\n        // mounted\r\n        onMounted(async ()=>{\r\n            await getPlaceData(); // 取得資料\r\n\r\n            nextTick(function () {\r\n                // do stuff with the DOM\r\n\r\n                \r\n            })\r\n        })\r\n\r\n\r\n\r\n        return {\r\n            data,\r\n\r\n            changeContinent,\r\n            changeCountry,\r\n            addPerson,\r\n        }\r\n    }\r\n}\r\n</script>","let timezonesMap;\n\nexport default function buildCountry(data, id) {\n  const name = data.countries[id];\n  if (!name) return null;\n\n  const tzMap = getTimezonesMap(data)[id] || {};\n\n  return {\n    id,\n    name,\n    timezones: tzMap.current || [],\n    allTimezones: tzMap.all || [],\n  };\n}\n\nfunction getTimezonesMap(data) {\n  if (!timezonesMap) timezonesMap = buildTimezonesMap(data);\n  return timezonesMap;\n}\n\nfunction buildTimezonesMap(data) {\n  return Object.keys(data.timezones).reduce((result, id) => {\n    const tz = data.timezones[id];\n    const { c, a } = tz;\n    const aliasTz = data.timezones[a] || {};\n    const countries = c || aliasTz.c;\n\n    if (!countries) return result;\n\n    countries.forEach((country) => {\n      if (!result[country]) Object.assign(result, { [country]: { current: [], all: [] } });\n      if (tz.r === undefined) result[country].current.push(id);\n      result[country].all.push(id);\n    });\n\n    return result;\n  }, {});\n}\n","export default function buildTimezone(data, name) {\n  const timezone = data.timezones[name];\n  if (!timezone) return null;\n\n  const { a: aliasOf = null } = timezone;\n  const aliasTz = aliasOf ? data.timezones[aliasOf] : {};\n  const tz = {\n    ...aliasTz,\n    ...data.timezones[name],\n  };\n\n  const countries = tz.c || [];\n  const utcOffset = tz.u;\n  const dstOffset = Number.isInteger(tz.d) ? tz.d : utcOffset;\n\n  const result = {\n    name,\n    countries,\n    utcOffset,\n    utcOffsetStr: getOffsetStr(utcOffset),\n    dstOffset,\n    dstOffsetStr: getOffsetStr(dstOffset),\n    aliasOf,\n  };\n  if (timezone.r) result.deprecated = true;\n  return result;\n}\n\nfunction getOffsetStr(offset) {\n  const hours = Math.floor(Math.abs(offset) / 60);\n  const min = offset % 60;\n  const sign = offset < 0 ? '-' : '+';\n\n  return `${sign}${getNumStr(hours)}:${getNumStr(min)}`;\n}\n\nfunction getNumStr(input) {\n  const num = Math.abs(input);\n  const prefix = num < 10 ? '0' : '';\n  return `${prefix}${num}`;\n}\n","import data from './data.json';\nimport buildCountry from './build-country';\nimport buildTimezone from './build-timezone';\n\nconst totalTimezones = Object.keys(data.timezones).length;\nconst countries = {};\nconst timezones = {};\nlet memoizedTimezones = 0;\n\nexport function getAllCountries(options = {}) {\n  return Object.keys(data.countries).reduce((prev, id) => {\n    return Object.assign(prev, { [id]: getCountry(id, options) });\n  }, {});\n}\n\nexport function getAllTimezones(options = {}) {\n  if (totalTimezones !== memoizedTimezones) Object.keys(data.timezones).forEach(getTimezone);\n  return deliverTimezones(timezones, options);\n}\n\nexport function getCountry(id, options = {}) {\n  if (!countries[id]) memoizeCountry(buildCountry(data, id));\n  return deliverCountry(countries[id], options);\n}\n\nfunction memoizeCountry(country) {\n  if (!country) return;\n  countries[country.id] = country;\n}\n\nexport function getTimezone(name) {\n  if (!timezones[name]) memoizeTimezone(buildTimezone(data, name));\n  return timezones[name] ? { ...timezones[name] } : null;\n}\n\nfunction memoizeTimezone(timezone) {\n  if (!timezone) return;\n  timezones[timezone.name] = timezone;\n  memoizedTimezones = Object.keys(timezone).length;\n}\n\nexport function getCountriesForTimezone(tzName, options = {}) {\n  const timezone = getTimezone(tzName) || {};\n  const values = timezone.countries || [];\n  return values.map((c) => getCountry(c, options));\n}\n\nexport function getCountryForTimezone(tzName, options = {}) {\n  const [main] = getCountriesForTimezone(tzName, options);\n  return main || null;\n}\n\nexport function getTimezonesForCountry(countryId, options = {}) {\n  const country = getCountry(countryId, options);\n  if (!country) return null;\n  const values = country.timezones || [];\n  return values.map(getTimezone);\n}\n\nfunction deliverTimezones(tzs, options) {\n  const { deprecated } = options || {};\n  if (deprecated === true) return tzs;\n  return Object.keys(tzs).reduce((prev, key) => {\n    if (!tzs[key].deprecated) Object.assign(prev, { [key]: tzs[key] });\n    return prev;\n  }, {});\n}\n\nfunction deliverCountry(country, options) {\n  if (!country) return null;\n  const { deprecated } = options || {};\n  const { allTimezones, ...other } = country;\n  const tz = deprecated ? country.allTimezones : country.timezones;\n  return { ...other, timezones: tz };\n}\n\nexport default {\n  getCountry,\n  getTimezone,\n  getAllCountries,\n  getAllTimezones,\n  getTimezonesForCountry,\n  getCountriesForTimezone,\n  getCountryForTimezone,\n};\n","import { render } from \"./TimeZoneHeader.vue?vue&type=template&id=6229c6b4\"\nimport script from \"./TimeZoneHeader.vue?vue&type=script&lang=js\"\nexport * from \"./TimeZoneHeader.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./TimeZone.vue?vue&type=template&id=70158cb9\"\nimport script from \"./TimeZone.vue?vue&type=script&lang=js\"\nexport * from \"./TimeZone.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_TimeZoneHeader","onEventAddPerson","$setup","addPerson","_component_TimeZoneBody","data","onEventDelPerson","delPerson","onEventSortPerson","sortPerson","_createElementVNode","_hoisted_2","_hoisted_3","_Fragment","_renderList","initData","current_list","item","index","key","_createTextVNode","_toDisplayString","person_name","_hoisted_4","_hoisted_5","cur_time","_hoisted_6","cur_date","cur_week","_hoisted_7","_hoisted_8","onClick","$event","_hoisted_9","_hoisted_10","_hoisted_11","_component_TimeZoneHours","hover_index","onEventUpdateHoverIndex","updateHoverIndex","person_location","_hoisted_12","gmt","gmt_ch","_hoisted_13","gmt_en","initItem","hours_arr","h","_normalizeClass","initHoverIndex","cur_hour","onMouseover","onMouseleave","_cache","name","props","emits","setup","context","toRef","emit","__exports__","components","TimeZoneHours","ref","type","value","for","selected","id","form_name","form_continent","onChange","changeContinent","select_continent_arr","continent","i","form_country","changeCountry","select_country_arr","country","form_region","select_region_arr","region","timezonesMap","buildCountry","countries","tzMap","getTimezonesMap","timezones","current","allTimezones","all","buildTimezonesMap","Object","keys","reduce","result","tz","c","a","aliasTz","forEach","assign","_defineProperty","undefined","r","push","buildTimezone","timezone","_timezone$a","aliasOf","_objectSpread2","utcOffset","u","dstOffset","Number","isInteger","d","utcOffsetStr","getOffsetStr","dstOffsetStr","deprecated","offset","hours","Math","floor","abs","min","sign","concat","getNumStr","input","num","prefix","totalTimezones","length","memoizedTimezones","getAllCountries","options","arguments","prev","getCountry","getAllTimezones","getTimezone","deliverTimezones","memoizeCountry","deliverCountry","memoizeTimezone","getCountriesForTimezone","tzName","values","map","getCountryForTimezone","_getCountriesForTimez","_getCountriesForTimez2","_slicedToArray","main","getTimezonesForCountry","countryId","tzs","_ref","_ref2","other","_objectWithoutProperties","_excluded","reactive","aryIannaTimeZones","async","getPlaceData","aryIanaTimeZones","Intl","supportedValuesOf","timezoneArr","sort","rest","split","remainder","join","ct","flag_continent","some","obj","flag_country","tzc","c_obj","place","p","computed","continent_arr","country_arr","cur_continent","filter","region_arr","cur_country","onMounted","nextTick","TimeZoneHeader","TimeZoneBody","person_list","getData","personsData","localStorage","getItem","JSON","parse","persons","userData","userdata","updateCurrentListData","date","Date","splice","person","strTime","toLocaleString","timeZone","timeZoneName","re_gmt","my_gmt","exec","strTime_ch","re_gmt_ch","my_gmt_ch","strTime_en","re_gmt_en","my_gmt_en","strTime_year","hourCycle","year","strTime_month","month","strTime_day","day","strTime_week","weekday","strTime_time","hour","minute","strTime_hour","hh_arr","k","indexOf","unshift","pop","shift","cl","setItem","stringify","flag","window","confirm","index1","index2","arr","toString","padStart","setInterval","console","log","render"],"sourceRoot":""}